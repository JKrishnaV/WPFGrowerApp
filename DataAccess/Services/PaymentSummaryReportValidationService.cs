using System;
using System.Collections.Generic;
using System.Linq;
using WPFGrowerApp.DataAccess.Models;
using WPFGrowerApp.Infrastructure.Logging;

namespace WPFGrowerApp.DataAccess.Services
{
    /// <summary>
    /// Service for validating Payment Summary Report data integrity and business rules.
    /// Provides comprehensive validation for data accuracy, business logic, and consistency.
    /// </summary>
    public class PaymentSummaryReportValidationService
    {
        #region Report Validation

        /// <summary>
        /// Validates the complete Payment Summary Report for data integrity and business rules.
        /// </summary>
        /// <param name="report">The report to validate</param>
        /// <returns>Validation result with any issues found</returns>
        public ValidationResult ValidateReport(PaymentSummaryReport report)
        {
            var result = new ValidationResult();

            if (report == null)
            {
                result.AddError("Report", "Report cannot be null");
                return result;
            }

            // Validate report metadata
            ValidateReportMetadata(report, result);

            // Validate summary statistics
            ValidateSummaryStatistics(report, result);

            // Validate grower details
            ValidateGrowerDetails(report.GrowerDetails, result);

            // Validate chart data
            ValidateChartData(report, result);

            // Validate business rules
            ValidateBusinessRules(report, result);

            Logger.Info($"Payment Summary Report validation completed. Found {result.Errors.Count} errors and {result.Warnings.Count} warnings.");
            return result;
        }

        #endregion

        #region Metadata Validation

        private void ValidateReportMetadata(PaymentSummaryReport report, ValidationResult result)
        {
            if (string.IsNullOrEmpty(report.ReportTitle))
                result.AddError("ReportTitle", "Report title is required");

            if (string.IsNullOrEmpty(report.GeneratedBy))
                result.AddError("GeneratedBy", "Generated by field is required");

            if (report.PeriodStart >= report.PeriodEnd)
                result.AddError("Period", "Period start must be before period end");

            if (report.PeriodStart > DateTime.Now)
                result.AddError("PeriodStart", "Period start cannot be in the future");

            if (report.PeriodEnd > DateTime.Now.AddDays(1))
                result.AddError("PeriodEnd", "Period end cannot be more than 1 day in the future");

            var periodSpan = report.PeriodEnd - report.PeriodStart;
            if (periodSpan.TotalDays > 365 * 5) // 5 years
                result.AddWarning("Period", "Report period spans more than 5 years");
        }

        #endregion

        #region Summary Statistics Validation

        private void ValidateSummaryStatistics(PaymentSummaryReport report, ValidationResult result)
        {
            if (report.TotalGrowers < 0)
                result.AddError("TotalGrowers", "Total growers cannot be negative");

            if (report.TotalReceiptsValue < 0)
                result.AddError("TotalReceiptsValue", "Total receipts value cannot be negative");

            if (report.TotalPaymentsMade < 0)
                result.AddError("TotalPaymentsMade", "Total payments made cannot be negative");

            if (report.TotalReceipts < 0)
                result.AddError("TotalReceipts", "Total receipts count cannot be negative");

            if (report.TotalWeight < 0)
                result.AddError("TotalWeight", "Total weight cannot be negative");

            // Validate payment breakdown
            if (report.Advance1Total < 0)
                result.AddError("Advance1Total", "Advance 1 total cannot be negative");

            if (report.Advance2Total < 0)
                result.AddError("Advance2Total", "Advance 2 total cannot be negative");

            if (report.Advance3Total < 0)
                result.AddError("Advance3Total", "Advance 3 total cannot be negative");

            if (report.FinalPaymentTotal < 0)
                result.AddError("FinalPaymentTotal", "Final payment total cannot be negative");

            if (report.TotalDeductions < 0)
                result.AddError("TotalDeductions", "Total deductions cannot be negative");

            if (report.PremiumTotal < 0)
                result.AddError("PremiumTotal", "Premium total cannot be negative");

            // Validate calculated totals
            var calculatedTotalPayments = report.Advance1Total + report.Advance2Total + report.Advance3Total + report.FinalPaymentTotal;
            if (Math.Abs(report.TotalPaymentsMade - calculatedTotalPayments) > 0.01m)
                result.AddError("TotalPaymentsMade", $"Total payments made ({report.TotalPaymentsMade:C2}) does not match sum of individual payments ({calculatedTotalPayments:C2})");

            // Validate outstanding balance calculation
            var calculatedOutstanding = report.TotalReceiptsValue - report.TotalPaymentsMade - report.TotalDeductions;
            if (Math.Abs(report.OutstandingBalance - calculatedOutstanding) > 0.01m)
                result.AddError("OutstandingBalance", $"Outstanding balance ({report.OutstandingBalance:C2}) does not match calculated value ({calculatedOutstanding:C2})");
        }

        #endregion

        #region Grower Details Validation

        private void ValidateGrowerDetails(List<GrowerPaymentDetail> growers, ValidationResult result)
        {
            if (growers == null)
            {
                result.AddError("GrowerDetails", "Grower details list cannot be null");
                return;
            }

            var growerIds = new HashSet<int>();
            var growerNumbers = new HashSet<string>();

            foreach (var grower in growers)
            {
                var prefix = $"Grower {grower.GrowerId}";
                
                // Validate unique identifiers
                if (growerIds.Contains(grower.GrowerId))
                    result.AddError($"{prefix}.GrowerId", "Duplicate grower ID found");

                if (growerNumbers.Contains(grower.GrowerNumber))
                    result.AddError($"{prefix}.GrowerNumber", "Duplicate grower number found");

                growerIds.Add(grower.GrowerId);
                growerNumbers.Add(grower.GrowerNumber);

                // Validate required fields
                if (grower.GrowerId <= 0)
                    result.AddError($"{prefix}.GrowerId", "Grower ID must be positive");

                if (string.IsNullOrEmpty(grower.GrowerNumber))
                    result.AddError($"{prefix}.GrowerNumber", "Grower number is required");

                if (string.IsNullOrEmpty(grower.FullName))
                    result.AddError($"{prefix}.FullName", "Full name is required");

                // Validate financial data
                ValidateGrowerFinancialData(grower, result, prefix);

                // Validate receipt data
                ValidateGrowerReceiptData(grower, result, prefix);

                // Validate status data
                ValidateGrowerStatusData(grower, result, prefix);
            }
        }

        private void ValidateGrowerFinancialData(GrowerPaymentDetail grower, ValidationResult result, string prefix)
        {
            if (grower.TotalReceiptsValue < 0)
                result.AddError($"{prefix}.TotalReceiptsValue", "Total receipts value cannot be negative");

            if (grower.Advance1Paid < 0)
                result.AddError($"{prefix}.Advance1Paid", "Advance 1 payment cannot be negative");

            if (grower.Advance2Paid < 0)
                result.AddError($"{prefix}.Advance2Paid", "Advance 2 payment cannot be negative");

            if (grower.Advance3Paid < 0)
                result.AddError($"{prefix}.Advance3Paid", "Advance 3 payment cannot be negative");

            if (grower.FinalPaymentPaid < 0)
                result.AddError($"{prefix}.FinalPaymentPaid", "Final payment cannot be negative");

            if (grower.TotalDeductions < 0)
                result.AddError($"{prefix}.TotalDeductions", "Total deductions cannot be negative");

            if (grower.PremiumAmount < 0)
                result.AddError($"{prefix}.PremiumAmount", "Premium amount cannot be negative");

            // Validate calculated totals
            var calculatedTotalPayments = grower.Advance1Paid + grower.Advance2Paid + grower.Advance3Paid + grower.FinalPaymentPaid;
            if (Math.Abs(grower.TotalPaymentsMade - calculatedTotalPayments) > 0.01m)
                result.AddError($"{prefix}.TotalPaymentsMade", $"Total payments made ({grower.TotalPaymentsMade:C2}) does not match sum of individual payments ({calculatedTotalPayments:C2})");

            // Validate outstanding balance
            var calculatedOutstanding = grower.TotalReceiptsValue - grower.TotalPaymentsMade - grower.TotalDeductions;
            if (Math.Abs(grower.OutstandingBalance - calculatedOutstanding) > 0.01m)
                result.AddError($"{prefix}.OutstandingBalance", $"Outstanding balance ({grower.OutstandingBalance:C2}) does not match calculated value ({calculatedOutstanding:C2})");

            // Business rule validations
            if (grower.TotalPaymentsMade > grower.TotalReceiptsValue + grower.TotalDeductions)
                result.AddWarning($"{prefix}.Payments", "Total payments exceed receipts value plus deductions");

            if (grower.OutstandingBalance < 0)
                result.AddWarning($"{prefix}.OutstandingBalance", "Outstanding balance is negative (overpaid)");
        }

        private void ValidateGrowerReceiptData(GrowerPaymentDetail grower, ValidationResult result, string prefix)
        {
            if (grower.TotalReceipts < 0)
                result.AddError($"{prefix}.TotalReceipts", "Total receipts count cannot be negative");

            if (grower.TotalWeight < 0)
                result.AddError($"{prefix}.TotalWeight", "Total weight cannot be negative");

            if (grower.TotalReceipts > 0 && grower.TotalReceiptsValue <= 0)
                result.AddWarning($"{prefix}.Receipts", "Has receipts but no receipt value");

            if (grower.TotalReceipts > 0 && grower.TotalWeight <= 0)
                result.AddWarning($"{prefix}.Weight", "Has receipts but no weight");

            // Validate date consistency
            if (grower.FirstReceiptDate.HasValue && grower.LastReceiptDate.HasValue)
            {
                if (grower.FirstReceiptDate > grower.LastReceiptDate)
                    result.AddError($"{prefix}.ReceiptDates", "First receipt date is after last receipt date");
            }

            if (grower.LastReceiptDate.HasValue && grower.LastPaymentDate.HasValue)
            {
                if (grower.LastReceiptDate > grower.LastPaymentDate)
                    result.AddWarning($"{prefix}.PaymentDates", "Last receipt date is after last payment date");
            }
        }

        private void ValidateGrowerStatusData(GrowerPaymentDetail grower, ValidationResult result, string prefix)
        {
            var validStatuses = new[] { "Complete", "Partial", "Pending", "Overdue" };
            if (!validStatuses.Contains(grower.PaymentStatus))
                result.AddError($"{prefix}.PaymentStatus", $"Invalid payment status: {grower.PaymentStatus}");

            if (grower.PaymentCompletionPercentage < 0 || grower.PaymentCompletionPercentage > 100)
                result.AddError($"{prefix}.PaymentCompletionPercentage", "Payment completion percentage must be between 0 and 100");

            if (grower.DaysSinceLastPayment < 0)
                result.AddError($"{prefix}.DaysSinceLastPayment", "Days since last payment cannot be negative");

            if (grower.DaysSinceLastReceipt < 0)
                result.AddError($"{prefix}.DaysSinceLastReceipt", "Days since last receipt cannot be negative");

            // Validate status consistency
            if (grower.PaymentStatus == "Complete" && grower.OutstandingBalance > 0.01m)
                result.AddWarning($"{prefix}.Status", "Status is Complete but has outstanding balance");

            if (grower.PaymentStatus == "Pending" && grower.TotalPaymentsMade > 0.01m)
                result.AddWarning($"{prefix}.Status", "Status is Pending but has payments made");
        }

        #endregion

        #region Chart Data Validation

        private void ValidateChartData(PaymentSummaryReport report, ValidationResult result)
        {
            ValidatePaymentDistributionData(report.PaymentDistribution, result);
            ValidateMonthlyTrendData(report.MonthlyTrends, result);
            ValidateTopPerformersData(report.TopPerformers, result);
        }

        private void ValidatePaymentDistributionData(List<PaymentDistributionChart> distribution, ValidationResult result)
        {
            if (distribution == null)
            {
                result.AddError("PaymentDistribution", "Payment distribution data cannot be null");
                return;
            }

            var totalValue = distribution.Sum(d => d.Value);
            var totalPercentage = distribution.Sum(d => d.Percentage);

            if (Math.Abs(totalPercentage - 100) > 0.1m)
                result.AddWarning("PaymentDistribution", $"Total percentage ({totalPercentage:F1}%) does not equal 100%");

            foreach (var item in distribution)
            {
                if (item.Value < 0)
                    result.AddError($"PaymentDistribution.{item.Category}", "Value cannot be negative");

                if (item.Count < 0)
                    result.AddError($"PaymentDistribution.{item.Category}", "Count cannot be negative");

                if (string.IsNullOrEmpty(item.Category))
                    result.AddError($"PaymentDistribution.{item.Category}", "Category cannot be empty");
            }
        }

        private void ValidateMonthlyTrendData(List<MonthlyTrendChart> trends, ValidationResult result)
        {
            if (trends == null)
            {
                result.AddError("MonthlyTrends", "Monthly trends data cannot be null");
                return;
            }

            foreach (var trend in trends)
            {
                if (trend.TotalPayments < 0)
                    result.AddError($"MonthlyTrends.{trend.MonthDisplay}", "Total payments cannot be negative");

                if (trend.PaymentCount < 0)
                    result.AddError($"MonthlyTrends.{trend.MonthDisplay}", "Payment count cannot be negative");

                if (trend.GrowerCount < 0)
                    result.AddError($"MonthlyTrends.{trend.MonthDisplay}", "Grower count cannot be negative");

                // Validate trend consistency
                var calculatedTotal = trend.Advance1Amount + trend.Advance2Amount + trend.Advance3Amount + trend.FinalPaymentAmount;
                if (Math.Abs(trend.TotalPayments - calculatedTotal) > 0.01m)
                    result.AddWarning($"MonthlyTrends.{trend.MonthDisplay}", $"Total payments ({trend.TotalPayments:C2}) does not match sum of individual payments ({calculatedTotal:C2})");
            }
        }

        private void ValidateTopPerformersData(List<GrowerPerformanceChart> performers, ValidationResult result)
        {
            if (performers == null)
            {
                result.AddError("TopPerformers", "Top performers data cannot be null");
                return;
            }

            for (int i = 0; i < performers.Count; i++)
            {
                var performer = performers[i];
                var prefix = $"TopPerformers[{i}]";

                if (performer.TotalPayments < 0)
                    result.AddError($"{prefix}.TotalPayments", "Total payments cannot be negative");

                if (performer.TotalReceipts < 0)
                    result.AddError($"{prefix}.TotalReceipts", "Total receipts cannot be negative");

                if (performer.ReceiptCount < 0)
                    result.AddError($"{prefix}.ReceiptCount", "Receipt count cannot be negative");

                if (performer.Rank != i + 1)
                    result.AddError($"{prefix}.Rank", $"Rank ({performer.Rank}) does not match position ({i + 1})");

                if (string.IsNullOrEmpty(performer.GrowerName))
                    result.AddError($"{prefix}.GrowerName", "Grower name cannot be empty");
            }

            // Validate ranking order
            for (int i = 1; i < performers.Count; i++)
            {
                if (performers[i].TotalPayments > performers[i - 1].TotalPayments)
                    result.AddWarning("TopPerformers", $"Performers are not ranked in descending order by payment amount");
            }
        }

        #endregion

        #region Business Rules Validation

        private void ValidateBusinessRules(PaymentSummaryReport report, ValidationResult result)
        {
            // Validate payment progression
            if (report.Advance2Total > 0 && report.Advance1Total == 0)
                result.AddWarning("BusinessRules", "Advance 2 payments exist but no Advance 1 payments");

            if (report.Advance3Total > 0 && report.Advance2Total == 0)
                result.AddWarning("BusinessRules", "Advance 3 payments exist but no Advance 2 payments");

            if (report.FinalPaymentTotal > 0 && report.Advance1Total == 0)
                result.AddWarning("BusinessRules", "Final payments exist but no advance payments");

            // Validate payment amounts
            if (report.Advance1Total > report.TotalReceiptsValue * 0.6m)
                result.AddWarning("BusinessRules", "Advance 1 payments exceed 60% of total receipts value");

            if (report.TotalPaymentsMade > report.TotalReceiptsValue * 1.1m)
                result.AddWarning("BusinessRules", "Total payments exceed 110% of total receipts value");

            // Validate grower distribution
            var activeGrowers = report.GrowerDetails.Count(g => g.IsActive);
            var totalGrowers = report.GrowerDetails.Count;
            
            if (totalGrowers > 0 && (double)activeGrowers / totalGrowers < 0.8)
                result.AddWarning("BusinessRules", "Less than 80% of growers are active");

            // Validate payment completion
            var completedGrowers = report.GrowerDetails.Count(g => g.PaymentStatus == "Complete");
            if (totalGrowers > 0 && (double)completedGrowers / totalGrowers < 0.5)
                result.AddWarning("BusinessRules", "Less than 50% of growers have complete payments");
        }

        #endregion
    }

    /// <summary>
    /// Represents the result of a validation operation.
    /// </summary>
    public class ValidationResult
    {
        public List<ValidationIssue> Errors { get; } = new List<ValidationIssue>();
        public List<ValidationIssue> Warnings { get; } = new List<ValidationIssue>();

        public bool IsValid => Errors.Count == 0;
        public bool HasWarnings => Warnings.Count > 0;

        public void AddError(string field, string message)
        {
            Errors.Add(new ValidationIssue(field, message, ValidationLevel.Error));
        }

        public void AddWarning(string field, string message)
        {
            Warnings.Add(new ValidationIssue(field, message, ValidationLevel.Warning));
        }

        public string GetSummary()
        {
            return $"Validation completed: {Errors.Count} errors, {Warnings.Count} warnings";
        }
    }

    /// <summary>
    /// Represents a validation issue.
    /// </summary>
    public class ValidationIssue
    {
        public string Field { get; }
        public string Message { get; }
        public ValidationLevel Level { get; }

        public ValidationIssue(string field, string message, ValidationLevel level)
        {
            Field = field;
            Message = message;
            Level = level;
        }

        public override string ToString()
        {
            return $"[{Level}] {Field}: {Message}";
        }
    }

    /// <summary>
    /// Represents the level of a validation issue.
    /// </summary>
    public enum ValidationLevel
    {
        Error,
        Warning
    }
}
